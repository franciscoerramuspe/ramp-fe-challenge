{"ast":null,"code":"var _jsxFileName = \"/Users/franciscoerramuspe/Downloads/ramp-fe-challenge 2/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [allEmployeesSelected, setAllEmployeesSelected] = useState(true);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    // Clearing the transactions\n    transactionsByEmployeeUtils.invalidateData();\n    try {\n      await employeeUtils.fetchAll();\n      await paginatedTransactionsUtils.fetchAll();\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    setIsLoading(true);\n    paginatedTransactionsUtils.invalidateData();\n    try {\n      await transactionsByEmployeeUtils.fetchById(employeeId);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null || newValue === EMPTY_EMPLOYEE) {\n            setAllEmployeesSelected(true);\n            // Reset transactions when no employee is selected\n            console.log('all employees selected');\n            console.log('transactions length', transactions === null || transactions === void 0 ? void 0 : transactions.length);\n            // paginatedTransactionsUtils.invalidateData();\n            // Fetching all transactions again\n            loadAllTransactions();\n            return;\n          }\n          setAllEmployeesSelected(false);\n          await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), transactions !== null && allEmployeesSelected && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await paginatedTransactionsUtils.fetchNextPage();\n          },\n          \"aria-label\": \"View more transactions\",\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"opjUJQuMWzHFKUBZhI0WV0qCE00=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","error","setError","allEmployeesSelected","setAllEmployeesSelected","transactions","_ref","_paginatedTransaction","loadAllTransactions","invalidateData","fetchAll","err","message","loadTransactionsByEmployee","employeeId","fetchById","loading","children","className","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","items","label","loadingLabel","parseItem","item","value","id","firstName","lastName","onChange","newValue","console","log","length","disabled","onClick","fetchNextPage","_c","$RefreshReg$"],"sources":["/Users/franciscoerramuspe/Downloads/ramp-fe-challenge 2/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { Employee } from \"./utils/types\";\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees();\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions();\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [allEmployeesSelected, setAllEmployeesSelected] = useState(true)\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  );\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    // Clearing the transactions\n    transactionsByEmployeeUtils.invalidateData();\n  \n    try {\n      await employeeUtils.fetchAll();\n      await paginatedTransactionsUtils.fetchAll();\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  \n  \n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      setIsLoading(true);\n      paginatedTransactionsUtils.invalidateData();\n\n      try {\n        await transactionsByEmployeeUtils.fetchById(employeeId);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        {error && <div className=\"Error\">{error}</div>}\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            \n            if (newValue === null || newValue === EMPTY_EMPLOYEE) {\n              setAllEmployeesSelected(true)\n              // Reset transactions when no employee is selected\n              console.log('all employees selected')\n              console.log('transactions length', transactions?.length)\n              // paginatedTransactionsUtils.invalidateData();\n              // Fetching all transactions again\n              loadAllTransactions();\n              return;\n            }\n            setAllEmployeesSelected(false)\n            await loadTransactionsByEmployee(newValue.id);\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n\n          {transactions !== null && allEmployeesSelected && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await paginatedTransactionsUtils.fetchNextPage();\n              }}\n              aria-label=\"View more transactions\"\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}