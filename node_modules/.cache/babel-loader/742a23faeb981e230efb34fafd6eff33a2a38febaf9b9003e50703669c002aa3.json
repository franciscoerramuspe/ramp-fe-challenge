{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null || previousResponse === null) {\n        return response;\n      }\n      return {\n        data: response.data,\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const fetchNextPage = useCallback(async () => {\n    if ((paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) == null) {\n      console.log('button clikc shouldnt work');\n    }\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions.nextPage\n    });\n    console.log(response);\n    setPaginatedTransactions(previousResponse => {\n      if (response === null || previousResponse === null) {\n        return response;\n      }\n      return {\n        data: response.data,\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData,\n    fetchNextPage\n  };\n}\n_s(usePaginatedTransactions, \"myJOUlkRG6WXfr+zcnvyIPCKM90=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","_s","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","response","page","nextPage","previousResponse","data","fetchNextPage","console","log","invalidateData"],"sources":["/Users/franciscoerramuspe/Downloads/ramp-fe-challenge 2/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n    Transaction[]\n  > | null>(null)\n\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n      }\n    )\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null || previousResponse === null) {\n        return response\n      }\n\n      return { data: response.data, nextPage: response.nextPage }\n    })\n  }, [fetchWithCache, paginatedTransactions])\n\n  const fetchNextPage = useCallback(async () => {\n    if (paginatedTransactions?.nextPage == null){\n      console.log('button clikc shouldnt work')\n    }\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      \n      {\n        page: paginatedTransactions.nextPage,\n      }\n    )\n    console.log(response)\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null || previousResponse === null) {\n        return response\n      }\n\n      return { data: response.data, nextPage: response.nextPage }\n    })\n  }, [fetchWithCache, paginatedTransactions])\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData, fetchNextPage }\n}\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAG7C,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,OAAO,SAASC,wBAAwBA,CAAA,EAAgC;EAAAC,EAAA;EACtE,MAAM;IAAEC,cAAc;IAAEC;EAAQ,CAAC,GAAGJ,cAAc,CAAC,CAAC;EACpD,MAAM,CAACK,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGP,QAAQ,CAExD,IAAI,CAAC;EAEf,MAAMQ,QAAQ,GAAGT,WAAW,CAAC,YAAY;IACvC,MAAMU,QAAQ,GAAG,MAAML,cAAc,CACnC,uBAAuB,EACvB;MACEM,IAAI,EAAEJ,qBAAqB,KAAK,IAAI,GAAG,CAAC,GAAGA,qBAAqB,CAACK;IACnE,CACF,CAAC;IAEDJ,wBAAwB,CAAEK,gBAAgB,IAAK;MAC7C,IAAIH,QAAQ,KAAK,IAAI,IAAIG,gBAAgB,KAAK,IAAI,EAAE;QAClD,OAAOH,QAAQ;MACjB;MAEA,OAAO;QAAEI,IAAI,EAAEJ,QAAQ,CAACI,IAAI;QAAEF,QAAQ,EAAEF,QAAQ,CAACE;MAAS,CAAC;IAC7D,CAAC,CAAC;EACJ,CAAC,EAAE,CAACP,cAAc,EAAEE,qBAAqB,CAAC,CAAC;EAE3C,MAAMQ,aAAa,GAAGf,WAAW,CAAC,YAAY;IAC5C,IAAI,CAAAO,qBAAqB,aAArBA,qBAAqB,uBAArBA,qBAAqB,CAAEK,QAAQ,KAAI,IAAI,EAAC;MAC1CI,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IAC3C;IACA,MAAMP,QAAQ,GAAG,MAAML,cAAc,CACnC,uBAAuB,EAEvB;MACEM,IAAI,EAAEJ,qBAAqB,CAACK;IAC9B,CACF,CAAC;IACDI,OAAO,CAACC,GAAG,CAACP,QAAQ,CAAC;IAErBF,wBAAwB,CAAEK,gBAAgB,IAAK;MAC7C,IAAIH,QAAQ,KAAK,IAAI,IAAIG,gBAAgB,KAAK,IAAI,EAAE;QAClD,OAAOH,QAAQ;MACjB;MAEA,OAAO;QAAEI,IAAI,EAAEJ,QAAQ,CAACI,IAAI;QAAEF,QAAQ,EAAEF,QAAQ,CAACE;MAAS,CAAC;IAC7D,CAAC,CAAC;EACJ,CAAC,EAAE,CAACP,cAAc,EAAEE,qBAAqB,CAAC,CAAC;EAE3C,MAAMW,cAAc,GAAGlB,WAAW,CAAC,MAAM;IACvCQ,wBAAwB,CAAC,IAAI,CAAC;EAChC,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEM,IAAI,EAAEP,qBAAqB;IAAED,OAAO;IAAEG,QAAQ;IAAES,cAAc;IAAEH;EAAc,CAAC;AAC1F;AAACX,EAAA,CAlDeD,wBAAwB;EAAA,QACFD,cAAc;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}